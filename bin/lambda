#!/bin/bash

# lambda path
route=$HOME/Lambda
# memory path
memory=$route/db/data
# log file
log_file=$memory/log/bin.txt
# preprocess command
pre="cd $route && source .env && source venv/bin/activate"

# colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No color


case $1 in

	lines)
		echo Lambda has $(git ls-files | xargs cat | wc -l) lines
	;;

	start)
		echo -e "${GREEN}Starting Lambda λ${NC}"
		# append to log
		echo Started Lambda at $(date +"[%Y-%m-%d - %T]") >> $log_file
		# run lambda
		tmux new-session -d -s db "$pre && python3 db/app.py"
		tmux new-session -d -s lambda "$pre && python3 lambda/app.py"
		tmux new-session -d -s discordo "$pre && python3 interfaces/discordo.py"
		sleep 2
		# iot stuff
		# $0 app bchat-server
		# $0 app bchat-api
        # see tmux active sessions
        tmux ls
	;;

	stop)
		echo -e "${RED}Stopping Lambda λ${NC}"
		# append to log
		echo Stopped Lambda at $(date +"[%Y-%m-%d - %T]") >> $log_file
		# stop lambda
		tmux kill-session -t db
		tmux kill-session -t lambda
		tmux kill-session -t discordo
		tmux kill-session -t bchat-api
		tmux kill-session -t bchat-server
	;;

	update)
		cd $route
		echo -e "${BLUE}Updating Lambda λ${NC}"
		# append to log
		echo Updated Lambda at $(date +"[%Y-%m-%d - %T]") >> $log_file
		# set lambda key
		eval "$(ssh-agent -s)"
		ssh-add ~/.ssh/lambda-git-key
		# update lambda
		git fetch && git merge origin/main
	;;

	restart)
		echo -e "${GREEN}Restarting Lambda λ${NC}"
		# append to log
		echo Restarted Lambda at $(date +"[%Y-%m-%d - %T]") >> $log_file
		# stop lambda
	    $0 stop
	    sleep 1
	    # and run lambda again	    
	    $0 start
	;;

	# reboot and update code
	rupdate)
		cd $route
		echo -e "${GREEN}Rupdating Lambda λ${NC}"
		# append to log
		echo Rupdating Lambda at $(date +"[%Y-%m-%d - %T]") >> $log_file
		# kill lambda
		$0 stop
		# set lambda key
		eval "$(ssh-agent -s)"
		ssh-add ~/.ssh/lambda-git-key
		# update lambda
		git fetch && git merge origin/main
		# run lambda again
		$0 start
	;;

	# used to install new python requirements
	reqinstall)
		echo Requrements installed at $(date +"[%Y-%m-%d - %T]") >> $log_file
		# stop lambda
		$0 stop
		# install requirements
		pip3 install -r requirements.txt
	;;

	requpdate)
		# apppend something on the log
		echo Requrements updated at $(date +"[%Y-%m-%d - %T]") >> $log_file
		# update the requirements file
		pip3 freeze > requirements.txt
	;;

	# backup from all the memory files, actually db/data
	backup)
		cd $route
		echo -e "${BLUE}Making Lambda Backup λ${NC}"
		# append to log
		echo lambda backup at $(date +"[%Y-%m-%d - %T]") >> $log_file
		# date label to name the file
		date=$(date +%m-%d-%Y)
		# create the folder for the files called backup
		mkdir backup
		# copy the memory dirs to backup
		cp -r lambdrive backup
		cp -r db/data backup
		# make the memory backup and send it to backups
		tar -cvf backups/backup-$date.tar.gz backup
		# remove the backup file
		rm -rf backup
		# remove all the log files
		rm $memory/log/*.txt
	;;

	full-backup)
		# append to log
		echo lambda full backup at $(date +"[%Y-%m-%d - %T]") >> $log_file
		# open home dir
		cd $HOME
		# date label to name the file
		date=$(date +%m-%d-%Y)
		# make the memory backup and send it to backups
		tar -cvf full-backup-$date.tar.gz Lambda
	;;

	# run an app
	app)
		# locate the app
		app="apps/$2/$2"
		# and run the app
		tmux new-session -d -s $2 "$pre && sh $app"
		# append to log
		echo lambda app $2 ran at $(date +"[%Y-%m-%d - %T]") >> $log_file
		# wait to errors
		sleep 1
	;;

	# kill app
	app-kill)
		# kill the app session
		tmux kill-session -t $2
		# append to log
		echo lambda app $2 killed at $(date +"[%Y-%m-%d - %T]") >> $log_file
	;;

	# daily scripts
	daily)
		# open Lambda
		cd $route
		# load the keys
		source .env && source venv/bin/activate
		# for each file in daily scripts
		for file in $route/daily/scripts/*.py; do
			# execute the script
		    python3 $file
		done
		# append to log
		echo lambda daily scripts ran at $(date +"[%Y-%m-%d - %T]") >> $log_file
	;;

	*)
		echo Unknown Command λ
		echo lambda "[start|stop|update|restart|rupdate|reqinstall|backup|app|app-kill]"
	;;
esac