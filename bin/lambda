#!/bin/bash

# lambda path
route=$HOME/Lambda

# colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No color

case $1 in

	run)
		echo -e "${GREEN}Running Lambda λ${NC}"
		# append to log
		echo "$(date +"[%Y-%m-%d - %T]")[BIN] -> running lambda" >> $route/ram/log.txt
		# run lambda appas
		tmux new-session -d -s lambda "cd $route && python3 lambda/app.py"
		tmux new-session -d -s discordo "cd $route && python3 discordo/app.py"
		# sleep and wait to errors
        sleep 2
        # see tmux active sessions
        tmux ls
	;;

	kill)
		echo -e "${RED}Killing Lambda λ${NC}"
		# append to log
		echo "$(date +"[%Y-%m-%d - %T]")[BIN] -> killing lambda" >> $route/ram/log.txt
		# kill lambda
		tmux kill-session -t lambda
		tmux kill-session -t discordo
	;;

	update)
		cd $route
		echo -e "${BLUE}Updating Lambda λ${NC}"
		# append to log
		echo "$(date +"[%Y-%m-%d - %T]")[BIN] -> updating lambda" >> $route/ram/log.txt
		# update lambda
		git fetch && git merge origin/main
	;;

	reboot)
		echo -e "${GREEN}Rebooting Lambda λ${NC}"
		# append to log
		echo "$(date +"[%Y-%m-%d - %T]")[BIN] -> rebooting lambda" >> $HOME/Lambda/ram/log.txt
		# kill lambda
		tmux kill-session -t lambda
	    tmux kill-session -t discordo
	    # and run lambda again
		tmux new-session -d -s lambda "cd $route && python3 lambda/app.py"
        tmux new-session -d -s discordo "cd $route && python3 discordo/app.py"
        # sleep and wait to errors
        sleep 2
        # see tmux active sessions
        tmux ls
	;;

	rupdate)
		cd $route
		echo -e "${GREEN}Rupdating Lambda λ${NC}"
		# append to log
		echo "$(date +"[%Y-%m-%d - %T]")[BIN] -> rupdating lambda" >> $route/ram/log.txt
		# kill lambda
		tmux kill-session -t lambda
		tmux kill-session -t discordo
		# update lambda
		git fetch && git merge origin/main
		# run lambda again
		tmux new-session -d -s lambda "cd $route && python3 lambda/app.py"
		tmux new-session -d -s discordo "cd $route && python3 discordo/app.py"
		# sleep and wait to errors
        sleep 2
        # see tmux active sessions
        tmux ls
	;;

	# backup from all the memory files. located in ram and data
	backup)
		cd $route
		echo -e "${BLUE}Making Lambda Backup λ${NC}"
		# append to log
		echo "$(date +"[%Y-%m-%d - %T]")[BIN] -> rupdating lambda" >> $route/ram/log.txt
		# date label to name the file
		date=$(date +%m-%d-%Y)
		# create the folder for the files
		mkdir $date-backup
		# copy the important files to the folder
		cp -r lambda/modules/data $date-backup/data
		cp -r ram $date-backup/ram
		# make the backup from data and add info.json
		tar cvzf $route/backups/$date-backup.tar.gz $date-backup/
		# remove the backup file
		rm -rf $date-backup
		# and clear the log file
		echo "" > $route/ram/log.txt
	;;

	# load a backup from a certain file
	checkpoint)
		# first make a backup from the actual info
		lambda backup
		# make a copy from the file
		cp $2 $route/checkpoint.tar.gz
		# get the name of the unziped folder
		plus_folder=$(echo $2 | cut -d '.' -f 1)
		folder=$(echo $plus_folder | cut -d '/' -f 3)
		# then delete all the files and put the checkpoint
		rm -rf $route/ram
		rm -rf $route/lambda/modules/data
		# unzip the copy of the file
		tar -xvf $route/checkpoint.tar.gz
		# now move the folders to their places
		echo moving the folders to their places...
		mv $route/$folder/data $route/lambda/modules/data
		mv $route/$folder/ram $route/ram
		# remove the unziped folder
		echo removing the checkpoint folder...
		rmdir $route/$folder
		rm $route/checkpoint.tar.gz
		echo -e "${BLUE}Lambda Checpoint Saved λ${NC}"
		# finally move the checkpoint to backups
		mkdir -p $route/backups
		mv $2 $route/backups
	;;

	*)
		echo Unknown Command λ
		echo lambda "[run|kill|update|reboot|rupdate|backup|checkpoint]"
	;;
esac